(define nil '())
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
(define (enumerate-interval low high)
  (if (> low high)
    nil
    (cons low (enumerate-interval (+ low 1) high))
  )
)

(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

(define (ordered-triple-sum n s)
  (filter (lambda (triple)
    (let ((x (car triple))
          (y (car (cdr triple)))
          (z (car (cdr (cdr triple)))))
      (and (not (= x y))
           (not (= x z))
           (not (= y z))
           (= (+ x y z) s)
      )
    ))
    (flatmap
    (lambda (i)
      (flatmap
        (lambda (j)
          (map
            (lambda (k) (list i j k))
            (enumerate-interval 1 n)
          )
        )
        (enumerate-interval 1 n)
      )
    )
    (enumerate-interval 1 n)
  )
  )
)

(ordered-triple-sum 4 6)
